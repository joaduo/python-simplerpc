/**
   * Simple RPC auto-generated Javascript library
   * ${COPYRIGHT}
   * Do not edit this file, may be rewritten in the future.
   */
  
(function (){
  
    function ClassDefinition(context, auto_sync){
      //Set the autosync values
      if(typeof(auto_sync) === 'undefined'){
        var auto_sync = false; 
      }
      else{
        context.log.w('Auto sync is on for exposed RPC Api');
      }
        
      var rpc_connection = require('simplerpc/rpc/RPCConnection')(context); 
      var rpc_commands_queue = require('simplerpc/rpc/RPCCommandsQueue')(context);
  
      function checkRequiredArgument(kwargs, method_name){
        var missing_count = 0;
        for(var arg_name in kwargs){
          if(typeof kwargs[arg_name] === 'undefined')
            ++missing_count;
        }
        if(missing_count > 0)
          throw new Error('There are '+ missing_count + ' missing arguments for exposed method "'+ method_name +'" of "rpc_api.${NAMESPACE}".');
      }
      
      function pushCommand(cmd_string, args, kwargs, callback, error_callback){
        rpc_commands_queue.push(cmd_string, args, kwargs, callback, error_callback);
        if(auto_sync){
          rpc_commands_queue.sync();
        }
      }
      
      function syncPublicReadOnlyRPC(cmd_url, kwargs, callback, error_callback){
        rpc_connection.syncPublicReadOnlyRPC(cmd_url, kwargs, callback, error_callback);
      }    
  
      var api_root = new Object();
  
      this.getApiRoot = function (){
        return api_root;
      };
      
      this.requireApi = function (namespace){
        var parent = api_root;
        context.log.d('Requiring API namespace: '+namespace);
        //Return the RPC Api module on the required namespace
        var names = namespaceToNamesList(namespace);
        for ( var index = 0; index < names.length; index++) {
          if(names[index] !== '')
            parent = parent[names[index]];
        }
        return parent;
      }; 
      
      function appendNamespace(parent, namespace){
        if(typeof(parent[namespace]) == 'undefined'){
          parent[namespace] = new Object();
        }
        return parent[namespace];
      }
  
      function namespaceToNamesList(namespace){
        return namespace.split('/');
      }
      
      function registerModule(module_namespace, module_definition){
        context.log.d('Registering RPC module namespace: '+module_namespace);
        var parent = api_root;
        var names = namespaceToNamesList(module_namespace);
        for ( var index = 0; index < names.length-1; index++) {
          parent = appendNamespace(parent, names[index]);
        }
        //Instance definition since its a module (not a class)
        var container = new module_definition();
        if(typeof parent[names[index]] === 'undefined'){
          //finally register the container in the namespace if it was not defined
          parent[names[index]] = container;
        }
        else{
            throw new Error('Trying to overwrite existing RPCApi namespace="'+namespace+'"');
        }      
      }
      
       
 
(function (){
  
  function ImagesBrowser(){

 
 
    this.getImagesList = function ( callback, error_callback){
      var cmd_string = 'images/ImagesBrowser.getImagesList'; 
      var args = [];
      var kwargs = {};
      checkRequiredArgument({}, 'getImagesList( callback, error_callback)');
      pushCommand(cmd_string, args, kwargs, callback, error_callback);    
    };
    this.deleteImage = function (image_id, callback, error_callback){
      var cmd_string = 'images/ImagesBrowser.deleteImage'; 
      var args = [image_id,];
      var kwargs = {};
      checkRequiredArgument({'image_id':image_id,}, 'deleteImage(image_id, callback, error_callback)');
      pushCommand(cmd_string, args, kwargs, callback, error_callback);    
    };

  }
  
  //Register module on rpc_api
  registerModule('images/ImagesBrowser',ImagesBrowser);

})();

      
    }
  
    if(typeof module !== 'undefined' && this.module !== module)   //Register module on Nodejs
      module.exports = require('namespace').registerClassNamespace(__filename, ClassDefinition);
    else // Register on browser
      require('namespace').registerClassNamespace(null, ClassDefinition);
  
} )();
  
